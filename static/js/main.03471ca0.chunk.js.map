{"version":3,"sources":["components/logo-bar/github.svg","components/logo-bar/react.svg","components/logo-bar/travis.svg","components/logo-bar/mbta.svg","api/mbta.js","components/route/route.js","components/schedule/schedule.js","components/logo-bar/logo-bar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","baseurl","list_route_stops","route_id","axios","get","params","then","response","data","list_scheduled_departures","stop","routes","now","Date","moment","format","map","route","id","join","Route","props","state","stops","selected_stop_idx","selected_stop","this","setState","handleStopSelect","length","prevProps","prevState","snapshot","idx","className","key","onClick","attributes","name","React","Component","days","Schedule","departures","schedule","console","log","departure","departure_time","matching_route","find","relationships","direction_destinations","direction_id","class","getDay","LogoBar","href","src","github","alt","travis","react","mbta","App","selected_route","selected_route_idx","_handleRouteSelect","handleRouteSelect","bind","value","route_options","label","long_name","active_route","options","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03471ca0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.3bd240d1.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/travis.4f9df7d6.svg\";","module.exports = __webpack_public_path__ + \"static/media/mbta.c5e2949f.svg\";","import axios from 'axios'\nimport moment from 'moment';\n\nconst baseurl = 'https://api-v3.mbta.com'\n\nfunction list_commuter_rail_routes() {\n  return axios.get(`${baseurl}/routes`, { params: {\n    'filter[type]': '2'\n  }}).then(response => response.data.data);\n}\n\nfunction list_route_stops(route_id) {\n  return axios.get(`${baseurl}/stops`, { params: {\n    'filter[route]': route_id\n  }}).then(response => response.data.data);\n}\n\nfunction list_scheduled_departures(stop, routes) {\n  var now = new Date();\n\n  return axios.get(`${baseurl}/schedules`, { params: {\n    'filter[stop]': stop,\n    'sort': 'departure_time',\n    'page[limit]': '10',\n    'filter[date]': moment(now).format(\"YYYY-MM-DD\"),\n    'filter[min_time]': moment(now).format(\"HH:mm\"),\n    'filter[route]': routes.map(route => route.id).join(','),\n    'include': 'stop,trip,prediction,route'\n  }}).then(response => response.data.data);\n}\n\nexport { list_commuter_rail_routes, list_route_stops, list_scheduled_departures }\n","import React from 'react';\n\nimport './route.css';\nimport { list_route_stops } from '../../api/mbta.js';\n\nclass Route extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {stops : [], selected_stop_idx: 0, selected_stop: \"\"};\n  }\n\n  componentDidMount() {\n    list_route_stops(this.props.route_id).then(stops => {\n      this.setState({stops: stops});\n      this.props.handleStopSelect(stops.length > 0 ? stops[0] : {})\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.route_id === this.props.route_id) return;\n    list_route_stops(this.props.route_id).then(stops => {\n      this.setState({stops: stops})\n      this.props.handleStopSelect(stops.length > 0 ? stops[0] : {})\n    });\n  }\n\n  handleStopSelect(selected_stop_idx) {\n    this.setState({selected_stop_idx: selected_stop_idx});\n    this.props.handleStopSelect(this.state.stops[selected_stop_idx]);\n  }\n\n  render() {\n\n    const stops = this.state.stops.map((stop, idx) => (\n      <div className=\"stop\" key={`stop-${idx}`}>\n        <div className={this.state.selected_stop_idx === idx ? \"stop-content selected\" : \"stop-content\"}\n             onClick={() => this.handleStopSelect(idx)}>\n          <div className=\"stop-pip\"/>\n          <span className=\"stop-label\">{stop.attributes.name}</span>\n        </div>\n        { idx + 1 !== this.state.stops.length ? <div className=\"stop-connector\"/> : <div/>}\n      </div>\n    ));\n\n    return (<div id=\"stop\">\n      {stops}\n    </div>);\n  }\n}\n\nexport default Route;\n","import React from 'react';\nimport moment from 'moment';\n\nimport './schedule.css';\nimport { list_scheduled_departures } from '../../api/mbta.js';\n\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nclass Schedule extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {departures: []};\n  }\n\n  componentDidMount() {\n    list_scheduled_departures(this.props.stop.id, this.props.routes).then(schedule => this.setState({departures: schedule}));\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.stop.id === this.props.stop.id) return;\n    list_scheduled_departures(this.props.stop.id, this.props.routes).then(schedule => this.setState({departures: schedule}));\n  }\n\n  render() {\n    console.log(this.state.departures);\n\n    const departures = this.state.departures.map((departure, idx) => {\n      if (!departure.attributes.departure_time) return null;\n\n      var matching_route = this.props.routes.find(route => route.id === departure.relationships.route.data.id);\n\n      return (\n        <tr className=\"schedule-row\" key={`departure-${idx}`}>\n          <td>MBTA</td>\n          <td>{moment(departure.attributes.departure_time).format(\"HH:mm\")}</td>\n          <td>{matching_route.attributes.direction_destinations[departure.attributes.direction_id]}</td>\n          <td>---</td>\n          <td>TBD</td>\n          <td>ON TIME</td>\n        </tr>\n      );\n    });\n\n    return (<div id=\"schedule\">\n      <div class=\"schedule-header\">\n        <div>\n          <h2>{days[(new Date()).getDay()]}</h2>\n          <p>{moment(new Date()).format(\"MM-DD-YYYY\")}</p>\n        </div>\n        <h1>{this.props.stop.attributes.name} Information</h1>\n        <div>\n          <h2>CURRENT TIME</h2>\n          <p className='time-display'>{moment(new Date()).format(\"HH:mm\")}</p>\n        </div>\n      </div>\n\n      <table>\n        <tr className=\"schedule-row\">\n          <th>CARRIER</th><th className=\"time\">TIME</th><th>DESTINATION</th><th>TRAIN#</th><th>TRACK#</th><th>STATUS</th>\n        </tr>\n        {departures}\n      </table>\n    </div>);\n  }\n}\n\nexport default Schedule;\n","\n\nimport React from 'react';\n\nimport './logo-bar.css';\nimport github from './github.svg';\nimport react from './react.svg';\nimport travis from './travis.svg';\nimport mbta from './mbta.svg';\n\n\nclass LogoBar extends React.Component {\n  render() {\n    return (<div id=\"logo-bar\">\n      <a href=\"https://github.com/GunnarHorve/i-like-trains\">\n        <img src={github} alt=\"github source\" />\n      </a>\n      <a href=\"https://travis-ci.com/github/GunnarHorve/i-like-trains\">\n        <img src={travis} alt=\"build server\" />\n      </a>\n      <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\">\n        <img src={react} alt=\"create react app\" />\n      </a>\n      <a href=\"https://www.mbta.com/developers/v3-api\">\n        <img src={mbta} alt=\"mbta v3 api\" />\n      </a>\n    </div>);\n  }\n}\n\nexport default LogoBar;\n","import React from 'react';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\n\nimport './App.css';\nimport Route from './components/route/route.js';\nimport Schedule from './components/schedule/schedule.js';\nimport LogoBar from './components/logo-bar/logo-bar.js';\n\nimport { list_commuter_rail_routes } from './api/mbta.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      routes: [],\n      selected_route: \"\",\n      selected_route_idx: 0,\n      selected_stop: \"\"\n    };\n    this._handleRouteSelect = this.handleRouteSelect.bind(this);\n  }\n\n  componentDidMount() {\n    list_commuter_rail_routes().then(routes => this.setState({routes: routes, selected_route: routes[0]}));\n  }\n\n  handleRouteSelect(selected_route) {\n    this.setState({selected_route: selected_route.value.route, selected_route_idx: selected_route.value.idx});\n  }\n\n  handleStopSelect(selected_stop) {\n    this.setState({selected_stop});\n  }\n\n  render() {\n    const route_options = this.state.routes.map((route, idx) => (\n      {value: {route: route, idx: idx}, label: route.attributes.long_name}\n    ));\n\n    const active_route = route_options.length > 0 ? route_options[this.state.selected_route_idx].label : \"loading\";\n\n    return (<div id=\"app\">\n      <div id=\"route-manager\">\n        <Dropdown options={route_options} onChange={this._handleRouteSelect} value={active_route}/>\n        {this.state.selected_route !== \"\" ?\n          <Route handleStopSelect={(stop) => this.handleStopSelect(stop)} route_id={this.state.selected_route.id}/>\n          : <div/>\n        }\n      </div>\n      <div id=\"schedule-manager\">\n        {this.state.selected_stop !== \"\" ?\n          <Schedule stop={this.state.selected_stop} route={this.state.selected_route} routes={this.state.routes}/>\n          : <div/>\n        }\n      </div>\n      <div/>\n\n      <LogoBar/>\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}